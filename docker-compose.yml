version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: metropolitan_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-metropolitan}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-metropolitan_db}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=tr_TR.utf8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/backend/drizzle/migrations:/docker-entrypoint-initdb.d:ro
    ports:
      - "127.0.0.1:${DB_PORT:-5432}:5432"
    networks:
      - metropolitan_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-metropolitan}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: metropolitan_redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfilename "metropolitan.aof"
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:${REDIS_PORT:-6379}:6379"
    networks:
      - metropolitan_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: packages/backend/Dockerfile
    image: metropolitan/backend:latest
    container_name: metropolitan_backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Application
      NODE_ENV: ${NODE_ENV}
      PORT: 3000

      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-metropolitan}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-metropolitan_db}
      DB_HOST: postgres
      DB_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-metropolitan}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-metropolitan_db}

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}

      # JWT
      JWT_SECRET: ${JWT_SECRET}

      # Stripe
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_SECRET_KEY_LIVE: ${STRIPE_SECRET_KEY_LIVE}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      STRIPE_WEBHOOK_SECRET_LIVE: ${STRIPE_WEBHOOK_SECRET_LIVE}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_PUBLISHABLE_KEY_LIVE: ${STRIPE_PUBLISHABLE_KEY_LIVE}

      # Twilio
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_VERIFY_SERVICE_SID: ${TWILIO_VERIFY_SERVICE_SID}

      # Fakturownia
      FAKTUROWNIA_API_TOKEN: ${FAKTUROWNIA_API_TOKEN}
      FAKTUROWNIA_ACCOUNT: ${FAKTUROWNIA_ACCOUNT}
      FAKTUROWNIA_API_URL: ${FAKTUROWNIA_API_URL}

      # Sentry
      SENTRY_DSN: ${SENTRY_DSN}

      # CORS
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-https://metropolitan.com,https://app.metropolitan.com}
    volumes:
      - ./packages/backend/public:/app/public:ro
      - backend_logs:/app/logs
    ports:
      - "127.0.0.1:${API_PORT:-3000}:3000"
    networks:
      - metropolitan_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: metropolitan_nginx
    restart: unless-stopped
    depends_on:
      - backend
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certificates:/etc/nginx/certificates:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - metropolitan_network
    profiles:
      - production

# Networks
networks:
  metropolitan_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local