// fakturownia-product.service.ts
// Service for managing Fakturownia products
// Handles product listing and search operations

import { FakturowniaApiClientService } from "./fakturownia-api-client.service";
import type { FakturowniaProduct } from "./fakturownia-types";

export class FakturowniaProductService {
  private apiClient: FakturowniaApiClientService;

  constructor() {
    this.apiClient = new FakturowniaApiClientService();
  }

  /**
   * T√ºm √ºr√ºnleri listele (t√ºm sayfalarƒ± √ßek)
   */
  async listProducts(): Promise<FakturowniaProduct[]> {
    try {
      console.log("üì¶ Fakturownia: √úr√ºnler listeleniyor...");

      const allProducts: FakturowniaProduct[] = [];
      let page = 1;
      const perPage = 100; // Maksimum deƒüer

      while (true) {
        console.log(`  Sayfa ${page} √ßekiliyor...`);

        const response = await this.apiClient.makeRequest<FakturowniaProduct[]>(
          `products.json?page=${page}&per_page=${perPage}`,
          {
            method: "GET",
          }
        );

        if (!response || response.length === 0) {
          break;
        }

        allProducts.push(...response);
        console.log(`  Sayfa ${page}: ${response.length} √ºr√ºn bulundu`);

        if (response.length < perPage) {
          break;
        }

        page++;
      }

      console.log(`‚úÖ Fakturownia: Toplam ${allProducts.length} √ºr√ºn bulundu`);
      return allProducts;
    } catch (error) {
      console.error("‚ùå Fakturownia √ºr√ºn listeleme hatasƒ±:", error);
      throw new Error(
        `Fakturownia √ºr√ºn listeleme hatasƒ±: ${error instanceof Error ? error.message : String(error)}`
      );
    }
  }

  /**
   * √úr√ºn koduna g√∂re ara
   */
  async searchProductByCode(code: string): Promise<FakturowniaProduct | null> {
    try {
      console.log(`üîç Fakturownia: √úr√ºn aranƒ±yor (code: ${code})...`);

      const products = await this.apiClient.makeRequest<FakturowniaProduct[]>(
        `products.json?code=${encodeURIComponent(code)}`,
        {
          method: "GET",
        }
      );

      if (products && products.length > 0) {
        console.log(`‚úÖ Fakturownia: √úr√ºn bulundu (ID: ${products[0].id})`);
        return products[0];
      }

      console.log("‚ö†Ô∏è Fakturownia: √úr√ºn bulunamadƒ±");
      return null;
    } catch (error) {
      console.error("‚ùå Fakturownia √ºr√ºn arama hatasƒ±:", error);
      throw new Error(
        `Fakturownia √ºr√ºn arama hatasƒ±: ${error instanceof Error ? error.message : String(error)}`
      );
    }
  }

  /**
   * ID'ye g√∂re √ºr√ºn getir
   */
  async getProduct(productId: number): Promise<FakturowniaProduct> {
    try {
      console.log(`üì¶ Fakturownia: √úr√ºn getiriliyor (ID: ${productId})...`);

      const response = await this.apiClient.makeRequest<FakturowniaProduct>(
        `products/${productId}.json`,
        {
          method: "GET",
        }
      );

      console.log(`‚úÖ Fakturownia: √úr√ºn getirildi (${response.name})`);
      return response;
    } catch (error) {
      console.error("‚ùå Fakturownia √ºr√ºn getirme hatasƒ±:", error);
      throw new Error(
        `Fakturownia √ºr√ºn getirme hatasƒ±: ${error instanceof Error ? error.message : String(error)}`
      );
    }
  }

  /**
   * √úr√ºn bilgilerini g√ºncelle (stock, tax, vb)
   */
  async updateProduct(
    productId: number,
    updates: {
      stock?: number;
      tax?: number;
      price?: number;
    }
  ): Promise<FakturowniaProduct> {
    try {
      console.log(`üîÑ Fakturownia: √úr√ºn g√ºncelleniyor (ID: ${productId})...`, updates);

      const response = await this.apiClient.makeRequest<FakturowniaProduct>(
        `products/${productId}.json`,
        {
          method: "PUT",
          body: JSON.stringify({
            product: {
              ...(updates.stock !== undefined && { quantity: updates.stock }),
              ...(updates.tax !== undefined && { tax: updates.tax }),
              ...(updates.price !== undefined && { price_net: updates.price }),
            },
          }),
        }
      );

      console.log(`‚úÖ Fakturownia: √úr√ºn g√ºncellendi (${response.name})`);
      return response;
    } catch (error) {
      console.error("‚ùå Fakturownia √ºr√ºn g√ºncelleme hatasƒ±:", error);
      throw new Error(
        `Fakturownia √ºr√ºn g√ºncelleme hatasƒ±: ${error instanceof Error ? error.message : String(error)}`
      );
    }
  }
}
